this.workbox = this.workbox || {};
this.workbox.precaching = (function (DBWrapper_mjs,logger_mjs,cacheNames_mjs,WorkboxError_mjs,fetchWrapper_mjs,cacheWrapper_mjs,assert_mjs,getFriendlyURL_mjs) {
  'use strict';

  try {
    self.workbox.v['workbox:precaching:3.6.3'] = 1;
  } catch (e) {} // eslint-disable-line

  /*
    Copyright 2017 Google Inc.

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        https://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
  */

  /**
   * Used as a consistent way of referencing a URL to precache.
   *
   * @private
   * @memberof module:workbox-precaching
   */
  class PrecacheEntry {
    /**
     * This class ensures all cache list entries are consistent and
     * adds cache busting if required.
     *
     * @param {*} originalInput
     * @param {string} url
     * @param {string} revision
     * @param {boolean} shouldCacheBust
     */
    constructor(originalInput, url, revision, shouldCacheBust) {
      this._originalInput = originalInput;
      this._entryId = url;
      this._revision = revision;
      const requestAsCacheKey = new Request(url, { credentials: 'same-origin' });
      this._cacheRequest = requestAsCacheKey;
      this._networkRequest = shouldCacheBust ? this._cacheBustRequest(requestAsCacheKey) : requestAsCacheKey;
    }

    /**
     * This method will either use Request.cache option OR append a cache
     * busting parameter to the URL.
     *
     * @param {Request} request The request to cache bust
     * @return {Request} A cachebusted Request
     *
     * @private
     */
    _cacheBustRequest(request) {
      let url = request.url;
      const requestOptions = {
        credentials: 'same-origin'
      };
      if ('cache' in Request.prototype) {
        // Make use of the Request cache mode where we can.
        // Reload skips the HTTP cache for outgoing requests and updates
        // the cache with the returned response.
        requestOptions.cache = 'reload';
      } else {
        const parsedURL = new URL(url, location);

        // This is done so the minifier can mangle 'global.encodeURIComponent'
        const _encodeURIComponent = encodeURIComponent;

        parsedURL.search += (parsedURL.search ? '&' : '') + _encodeURIComponent(`_workbox-cache-bust`) + '=' + _encodeURIComponent(this._revision);
        url = parsedURL.toString();
      }

      return new Request(url, requestOptions);
    }
  }

  /*
    Copyright 2017 Google Inc.

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        https://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
  */

  // Allows minifier to mangle this name
  const REVISON_IDB_FIELD = 'revision';
  const URL_IDB_FIELD = 'url';
  const DB_STORE_NAME = 'precached-details-models';
  /**
   * This model will track the relevant information of entries that
   * are cached and their matching revision details.
   *
   * @private
   */
  class PrecachedDetailsModel {
    /**
     * Construct a new model for a specific cache.
     *
     * @param {string} dbName
     * @private
     */
    constructor(dbName) {
      // This ensures the db name contains only letters, numbers, '-', '_' and '$'
      const filteredDBName = dbName.replace(/[^\w-]/g, '_');
      this._db = new DBWrapper_mjs.DBWrapper(filteredDBName, 2, {
        onupgradeneeded: this._handleUpgrade
      });
    }

    /**
     * Should perform an upgrade of indexedDB.
     *
     * @param {Event} evt
     *
     * @private
     */
    _handleUpgrade(evt) {
      const db = evt.target.result;
      if (evt.oldVersion < 2) {
        // IndexedDB version 1 used both 'workbox-precaching' and
        // 'precached-details-model' before upgrading to version 2.
        // Delete them and create a new store with latest schema.
        if (db.objectStoreNames.contains('workbox-precaching')) {
          db.deleteObjectStore('workbox-precaching');
        }
        if (db.objectStoreNames.contains(DB_STORE_NAME)) {
          db.deleteObjectStore(DB_STORE_NAME);
        }
      }
      db.createObjectStore(DB_STORE_NAME);
    }

    /**
     * Check if an entry is already cached. Returns false if
     * the entry isn't cached or the revision has changed.
     *
     * @param {string} cacheName
     * @param {PrecacheEntry} precacheEntry
     * @return {boolean}
     *
     * @private
     */
    _isEntryCached(cacheName, precacheEntry) {
      var _this = this;

      return babelHelpers.asyncToGenerator(function* () {
        const revisionDetails = yield _this._getRevision(precacheEntry._entryId);
        if (revisionDetails !== precacheEntry._revision) {
          return false;
        }

        const openCache = yield caches.open(cacheName);
        const cachedResponse = yield openCache.match(precacheEntry._cacheRequest);
        return !!cachedResponse;
      })();
    }

    /**
     * @return {Promise<Array>}
     *
     * @private
     */
    _getAllEntries() {
      var _this2 = this;

      return babelHelpers.asyncToGenerator(function* () {
        return yield _this2._db.getAllMatching(DB_STORE_NAME, {
          includeKeys: true
        });
      })();
    }

    /**
     * Get the current revision details.
     *
     * @param {Object} entryId
     * @return {Promise<string|null>}
     *
     * @private
     */
    _getRevision(entryId) {
      var _this3 = this;

      return babelHelpers.asyncToGenerator(function* () {
        const data = yield _this3._db.get(DB_STORE_NAME, entryId);
        return data ? data[REVISON_IDB_FIELD] : null;
      })();
    }

    /**
     * Add an entry to the details model.
     *
     * @param {PrecacheEntry} precacheEntry
     *
     * @private
     */
    _addEntry(precacheEntry) {
      var _this4 = this;

      return babelHelpers.asyncToGenerator(function* () {
        yield _this4._db.put(DB_STORE_NAME, {
          [REVISON_IDB_FIELD]: precacheEntry._revision,
          [URL_IDB_FIELD]: precacheEntry._cacheRequest.url
        }, precacheEntry._entryId);
      })();
    }

    /**
     * Delete entry from details model.
     *
     * @param {string} entryId
     *
     * @private
     */
    _deleteEntry(entryId) {
      var _this5 = this;

      return babelHelpers.asyncToGenerator(function* () {
        yield _this5._db.delete(DB_STORE_NAME, entryId);
      })();
    }
  }

  /*
    Copyright 2017 Google Inc.

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        https://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
  */

  /**
   * This method will print out a warning if a precache entry doesn't have
   * a `revision` value.
   *
   * This is common if the asset if revisioned in the url like `index.1234.css`.
   *
   * @param {Map} entriesMap
   *
   * @private
   * @memberof module:workbox-preaching
   */
  var showWarningsIfNeeded = (entriesMap => {
    const urlOnlyEntries = [];
    entriesMap.forEach(entry => {
      if (typeof entry === 'string' || !entry._originalInput.revision) {
        urlOnlyEntries.push(entry._originalInput);
      }
    });

    if (urlOnlyEntries.length === 0) {
      // No warnings needed.
      return;
    }

    logger_mjs.logger.groupCollapsed('Are your precached assets revisioned?');

    const urlsList = urlOnlyEntries.map(urlOnlyEntry => {
      return `    - ${JSON.stringify(urlOnlyEntry)}`;
    }).join(`\n`);

    logger_mjs.logger.warn(`The following precache entries might not be revisioned:` + `\n\n` + urlsList + `\n\n`);

    logger_mjs.logger.unprefixed.warn(`You can learn more about why this might be a ` + `problem here: https://developers.google.com/web/tools/workbox/modules/workbox-precaching`);

    logger_mjs.logger.groupEnd();
  });

  /*
    Copyright 2017 Google Inc.

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        https://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
  */

  /**
   * @param {string} groupTitle
   * @param {Array<PrecacheEntry>} entries
   *
   * @private
   */
  const _nestedGroup = (groupTitle, entries) => {
    if (entries.length === 0) {
      return;
    }

    logger_mjs.logger.groupCollapsed(groupTitle);

    entries.forEach(entry => {
      logger_mjs.logger.log(entry._originalInput);
    });

    logger_mjs.logger.groupEnd();
  };

  /**
   * @param {Array<Object>} entriesToPrecache
   * @param {Array<Object>} alreadyPrecachedEntries
   *
   * @private
   * @memberof module:workbox-precachig
   */
  var printInstallDetails = ((entriesToPrecache, alreadyPrecachedEntries) => {
    // Goal is to print the message:
    //    Precaching X files.
    // Or:
    //    Precaching X files. Y files were cached and up-to-date.

    const precachedCount = entriesToPrecache.length;
    const alreadyPrecachedCount = alreadyPrecachedEntries.length;
    let printText = `Precaching ${precachedCount} file${precachedCount === 1 ? '' : 's'}.`;
    if (alreadyPrecachedCount > 0) {
      printText += ` ${alreadyPrecachedCount} ` + `file${alreadyPrecachedCount === 1 ? ' is' : 's are'} already cached.`;
    }

    logger_mjs.logger.groupCollapsed(printText);

    _nestedGroup(`View precached URLs.`, entriesToPrecache);
    _nestedGroup(`View URLs that were already precached.`, alreadyPrecachedEntries);
    logger_mjs.logger.groupEnd();
  });

  /*
    Copyright 2017 Google Inc.

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        https://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
  */

  const logGroup = (groupTitle, urls) => {
    logger_mjs.logger.groupCollapsed(groupTitle);

    urls.forEach(url => {
      logger_mjs.logger.log(url);
    });

    logger_mjs.logger.groupEnd();
  };

  /**
   * @param {Array<string>} deletedCacheRequests
   * @param {Array<string>} deletedRevisionDetails
   *
   * @private
   * @memberof module:workbox-precachig
   */
  var printCleanupDetails = ((deletedCacheRequests, deletedRevisionDetails) => {
    if (deletedCacheRequests.length === 0 && deletedRevisionDetails.length === 0) {
      return;
    }

    const cacheDeleteCount = deletedCacheRequests.length;
    const revisionDeleteCount = deletedRevisionDetails.length;

    const cacheDeleteText = `${cacheDeleteCount} cached ` + `request${cacheDeleteCount === 1 ? ' was' : 's were'} deleted`;
    const revisionDeleteText = `${revisionDeleteCount} ` + `${revisionDeleteCount === 1 ? 'entry' : 'entries'} ` + `${revisionDeleteCount === 1 ? 'was' : 'were'} deleted from IndexedDB.`;

    logger_mjs.logger.groupCollapsed(`During precaching cleanup, ${cacheDeleteText} and ${revisionDeleteText}`);

    logGroup('Deleted Cache Requests', deletedCacheRequests);
    logGroup('Revision Details Deleted from DB', deletedRevisionDetails);

    logger_mjs.logger.groupEnd();
  });

  /*
    Copyright 2017 Google Inc.

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        https://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
  */

  /**
   * @param {Response} response
   * @return {Response}
   *
   * @private
   * @memberof module:workbox-precaching
   */
  const cleanRedirect = (() => {
    var _ref = babelHelpers.asyncToGenerator(function* (response) {
      const clonedResponse = response.clone();

      // Not all browsers support the Response.body stream, 